// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReadOfStream.DbContexts;

#nullable disable

namespace ReadOfStream.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231106084730_Migrations")]
    partial class Migrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ReadOfStream.Models.Tag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TagToUserTagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TagToUserUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.HasIndex("TagToUserUserId", "TagToUserTagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ReadOfStream.Models.TagToUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "TagId");

                    b.ToTable("TagToUsers");
                });

            modelBuilder.Entity("ReadOfStream.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId");

                    b.HasIndex("TagId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ReadOfStream.Models.Tag", b =>
                {
                    b.HasOne("ReadOfStream.Models.TagToUser", null)
                        .WithMany("Tags")
                        .HasForeignKey("TagToUserUserId", "TagToUserTagId");
                });

            modelBuilder.Entity("ReadOfStream.Models.TagToUser", b =>
                {
                    b.HasOne("ReadOfStream.Models.User", "User")
                        .WithMany("Tags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReadOfStream.Models.User", b =>
                {
                    b.HasOne("ReadOfStream.Models.Tag", null)
                        .WithMany("Users")
                        .HasForeignKey("TagId");
                });

            modelBuilder.Entity("ReadOfStream.Models.Tag", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ReadOfStream.Models.TagToUser", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("ReadOfStream.Models.User", b =>
                {
                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
